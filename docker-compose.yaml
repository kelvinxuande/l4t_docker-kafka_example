# schema reference: 
    # https://github.com/jahnestacado/kafka-zookeeper-schema-registry-stack-arm64v8/blob/master/docker-stack-arm64v8.yml
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
    # https://github.com/rmoff/kafka-listeners/tree/master/python

version: "3.4"
services:
    kafka-zookeeper:
        container_name: kafka-zookeeper
        image: arm64v8/zookeeper
        hostname: kafka-zookeeper
        networks:
            - kafka-network
        # volumes:
        #     - /mnt/shared/kafka-zookeeper:/data
        # can be reach at 2181 by default
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
        # disable logging for this container
        logging:
            driver: none 
    kafka-broker:
        container_name: kafka-broker
        image: zeelos/cp-kafka:5.2.2-arm64v8
        hostname: kafka-broker
        # for inbound traffic from localhost on docker machine if any
        ports: 
            - "19092:19092"
        depends_on:
            - kafka-zookeeper
        environment:
            KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,CONNECTIONS_FROM_HOST://localhost:19092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CREATE_TOPICS: "topic_test:1:1"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - kafka-network
        # disable logging for this container
        logging:
            driver: none 
        # volumes:
        #     - /mnt/shared/kafka-broker/:/var/lib/kafka-broker/data

    producer:
        container_name: producer
        image: producer
        depends_on: 
            - kafka-zookeeper
            - kafka-broker
        networks: 
            - kafka-network
        build:
            context: producer/
            dockerfile: Dockerfile
        command: ["python3", "producer.py"]

    consumer:
        container_name: consumer
        image: consumer
        depends_on: 
            - kafka-zookeeper
            - kafka-broker
            - producer
        networks: 
            - kafka-network
        build:
            context: consumer/
            dockerfile: Dockerfile
        command: ["python3", "consumer.py"]

networks:
    kafka-network:
        name: kafka-network
        driver: bridge