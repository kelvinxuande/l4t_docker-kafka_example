# schema reference: 
    # https://github.com/jahnestacado/kafka-zookeeper-schema-registry-stack-arm64v8/blob/master/docker-stack-arm64v8.yml
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
    # https://github.com/rmoff/kafka-listeners/tree/master/python

version: "3.4"
services:

    kafka_zookeeper:
        container_name: kafka_zookeeper
        # official docker Apache Zookeeper image
        image: zookeeper
        networks:
            - kafka_network
        hostname: kafka_zookeeper
        # volumes:
        #     - /mnt/shared/kafka_zookeeper:/data
        # can be reach at 2181 by default
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
        # # disable logging for this container
        # logging:
        #     driver: none

    kafka_broker:
        container_name: kafka_broker
        # 3rd party client, arm64v8 client not officially supported
        image: fogsyio/kafka:2.2.0
        depends_on:
            - kafka_zookeeper
        networks:
            - kafka_network
        hostname: kafka_broker
        # for inbound traffic from localhost on docker machine if any
        ports: 
            - "19092:19092"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        # volumes:
        #     - /mnt/shared/kafka_broker/:/var/lib/kafka_broker/data
        environment:
            KAFKA_ADVERTISED_HOST_NAME: kafka_broker
            KAFKA_ZOOKEEPER_CONNECT: kafka_zookeeper:2181
            KAFKA_LISTENERS: PLAINTEXT://kafka_broker:9092,CONNECTIONS_FROM_HOST://localhost:19092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker:9092,CONNECTIONS_FROM_HOST://localhost:19092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        # # disable logging for this container
        # logging:
        #     driver: none

    producer:
        container_name: producer
        image: producer
        depends_on: 
            - kafka_zookeeper
            - kafka_broker
        networks: 
            - kafka_network
        build:
            context: producer/
            dockerfile: Dockerfile
        command: ["python3", "producer.py"]

    consumer:
        container_name: consumer
        image: consumer
        depends_on: 
            - kafka_zookeeper
            - kafka_broker
            - producer
        networks: 
            - kafka_network
        build:
            context: consumer/
            dockerfile: Dockerfile
        command: ["python3", "consumer.py"]

networks:
    kafka_network:
        name: kafka_network
        driver: bridge